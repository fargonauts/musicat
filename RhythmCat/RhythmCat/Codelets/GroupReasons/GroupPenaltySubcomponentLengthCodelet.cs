using System;
using System.Collections.Generic;
using System.Text;


namespace RhythmCat {
	[Codelet("Scout", CodeletAttribute.CodeletWorkType.Examine, 100, true)]
	public class GroupPenaltySubcomponentLengthCodelet : Codelet {


		/// <summary>
		/// The group to examine. If none given, we select randomly.
		/// </summary>
		private Group group;

		public GroupPenaltySubcomponentLengthCodelet(int urgency, Codelet parent, Coderack coderack, Workspace workspace, Slipnet slipnet)
			: base("Group Penalty Subcomponent Length", urgency, parent, coderack, workspace, slipnet) {

		}

		/// <summary>
		/// Use this constructer to tell the codelet which group to examine. 
		/// Otherwise, it picks one randomly.
		/// </summary>
		/// <param name="urgency"></param>
		/// <param name="parent"></param>
		/// <param name="coderack"></param>
		/// <param name="workspace"></param>
		/// <param name="slipnet"></param>
		/// <param name="notes"></param>
		public GroupPenaltySubcomponentLengthCodelet(int urgency, Codelet parent, Coderack coderack, Workspace workspace, Slipnet slipnet,
			Group group)
			: base("Group Penalty Subcomponent Length", urgency, parent, coderack, workspace, slipnet) {
			this.group = group;
		}

		public override void Run() {
			if (group == null) {
				group = workspace.PickRandomGroupByRecency();
			}

			if (group == null)
				return;

			if (!workspace.groups.Contains(group))
				return;

			// Add to attention history.
			workspace.RecordCodeletAttentionHistory(this, group.MinLocation, group.MaxLocation);


			// Check out the subcomponents of this group, and penalize based on the ratio of lengths (do it foreach pair of subcomponents)
			int num = group.GroupElements.Count;

			for (int i = 0; i < num - 1; i++) {
				// Compute the 2 lengths of this pair.
				int len1 = group.GroupElements[i].LengthInMeasures;
				int len2 = group.GroupElements[i+1].LengthInMeasures;
				if (len1 == len2)
					return;

				// Sort in order so that len 1 is shorter than len2.
				if (len1 > len2) {
					int tmp = len2;
					len2 = len1;
					len1 = tmp;
				}
				double x = (float)len1/len2;
			
				// coefficients: generated by http://zunzun.com   using Logistic B: y = a / (1.0 + (x/b)
				// input data: x = 0, y = 1
				//				.5 => .8
				//				.8 => .1
				//				1.0 => 0
				double b = 0.6;
				double c = 7.74;
				double strength = 100.0  / (1.0 + Math.Pow(x/b, c));
				
				group.AddGroupPenaltyReason(new GroupPenaltySubcomponentLength(group, strength));

			}

		}
	}
}
